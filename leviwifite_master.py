#!/usr/bin/env python3
"""
LEVIWIFITE MASTER - Fichier Principal Ultra-Avanc√©
Coordination de tous les composants Python, Ruby et Bash
"""

import os
import sys
import json
import time
import subprocess
import argparse
import signal
import threading
from datetime import datetime

# Import des modules locaux
from network_scanner import NetworkScanner
from advanced_attacks import AdvancedAttacks
from report_generator import ReportGenerator

class LeviWifiteMaster:
    def __init__(self):
        self.config = self.load_config()
        self.scanner = None
        self.attacker = None
        self.report_generator = None
        self.results = []
        self.attack_processes = []
        
    def load_config(self):
        try:
            with open('config.json', 'r') as f:
                return json.load(f)
        except FileNotFoundError:
            return {
                "interface": "wlan0",
                "monitor_mode": True,
                "attack_timeout": 300,
                "wordlist_path": "/usr/share/wordlists/rockyou.txt",
                "output_dir": "results",
                "log_level": "INFO"
            }
    
    def log(self, message, level="INFO"):
        timestamp = datetime.now().strftime('%Y-%m-%d %H:%M:%S')
        print(f"[{timestamp}] [{level}] {message}")
    
    def check_prerequisites(self):
        self.log("V√©rification des pr√©requis...")
        
        tools = ["airmon-ng", "airodump-ng", "aireplay-ng", "aircrack-ng", "python3", "ruby"]
        missing = []
        
        for tool in tools:
            if not self.check_tool(tool):
                missing.append(tool)
        
        if missing:
            self.log(f"Outils manquants: {missing}", "ERROR")
            return False
        
        self.log("Tous les pr√©requis sont satisfaits")
        return True
    
    def check_tool(self, tool_name):
        try:
            subprocess.run([tool_name, '--help'], capture_output=True, timeout=5)
            return True
        except:
            return False
    
    def start_monitor_mode(self):
        self.log("Activation du mode monitor...")
        try:
            subprocess.run(['airmon-ng', 'start', self.config['interface']], check=True)
            self.log("Mode monitor activ√©")
            return True
        except:
            self.log("√âchec de l'activation du mode monitor", "ERROR")
            return False
    
    def scan_networks(self):
        self.log("D√©but du scan des r√©seaux...")
        
        self.scanner = NetworkScanner(self.config['interface'], self.config['output_dir'])
        self.scanner.start_monitor_mode()
        
        networks = self.scanner.scan_networks_fast(30)
        
        if networks:
            self.log(f"Scan termin√©: {len(networks)} r√©seaux trouv√©s")
            return networks
        else:
            self.log("Aucun r√©seau trouv√©", "WARNING")
            return []
    
    def select_target(self, networks):
        if not networks:
            return None
        
        print("\nüì° R√©seaux WiFi d√©tect√©s:")
        for i, network in enumerate(networks):
            print(f"  {i+1}. {network.get('essid', 'SSID Cach√©')} - {network['bssid']} (Canal {network['channel']})")
        
        try:
            choice = int(input(f"\nüéØ Choisissez une cible (1-{len(networks)}): ")) - 1
            if 0 <= choice < len(networks):
                return networks[choice]
        except ValueError:
            pass
        
        return None
    
    def run_advanced_attacks(self, target):
        self.log(f"Lancement des attaques avanc√©es sur {target['essid']}")
        
        self.attacker = AdvancedAttacks(
            interface=self.config['interface'],
            target_bssid=target['bssid'],
            target_essid=target['essid'],
            output_dir=self.config['output_dir']
        )
        
        # Lancer toutes les attaques
        success = self.attacker.run_all_attacks()
        
        if success:
            self.results.extend(self.attacker.results)
            self.log("Attaques avanc√©es termin√©es avec succ√®s")
        else:
            self.log("Certaines attaques ont √©chou√©", "WARNING")
        
        return success
    
    def run_ruby_attacks(self, target):
        self.log("Lancement des attaques Ruby...")
        
        try:
            command = [
                'ruby', 'ruby_attack.rb',
                '-i', self.config['interface'],
                '-t', target['bssid'],
                '-e', target['essid'],
                '-o', self.config['output_dir']
            ]
            
            result = subprocess.run(command, capture_output=True, text=True, timeout=600)
            
            if result.returncode == 0:
                self.log("Attaques Ruby termin√©es avec succ√®s")
                return True
            else:
                self.log("Attaques Ruby √©chou√©es", "WARNING")
                return False
                
        except Exception as e:
            self.log(f"Erreur lors des attaques Ruby: {e}", "ERROR")
            return False
    
    def run_bash_attacks(self, target):
        self.log("Lancement des attaques Bash...")
        
        try:
            command = [
                './leviwifite.sh',
                '-i', self.config['interface'],
                '-t', target['bssid'],
                '--auto'
            ]
            
            result = subprocess.run(command, capture_output=True, text=True, timeout=600)
            
            if result.returncode == 0:
                self.log("Attaques Bash termin√©es avec succ√®s")
                return True
            else:
                self.log("Attaques Bash √©chou√©es", "WARNING")
                return False
                
        except Exception as e:
            self.log(f"Erreur lors des attaques Bash: {e}", "ERROR")
            return False
    
    def generate_final_report(self, scan_data):
        self.log("G√©n√©ration du rapport final...")
        
        self.report_generator = ReportGenerator(self.config['output_dir'])
        
        # Pr√©parer les donn√©es de scan
        scan_report = {
            'networks_found': len(scan_data),
            'networks': scan_data,
            'scan_time': datetime.now().isoformat()
        }
        
        # G√©n√©rer le rapport principal
        report_file = self.report_generator.generate_main_report(scan_report, self.results)
        
        self.log(f"Rapport final g√©n√©r√©: {report_file}")
        return report_file
    
    def cleanup(self):
        self.log("Nettoyage en cours...")
        
        # Arr√™ter tous les processus
        for process in self.attack_processes:
            try:
                process.terminate()
            except:
                pass
        
        # D√©sactiver le mode monitor
        try:
            subprocess.run(['airmon-ng', 'stop', self.config['interface']], check=True)
            self.log("Mode monitor d√©sactiv√©")
        except:
            pass
    
    def run_full_pentest(self):
        self.log("üöÄ D√©but du pentest WiFi complet LEVIWIFITE")
        
        try:
            # 1. V√©rifications
            if not self.check_prerequisites():
                return False
            
            # 2. Mode monitor
            if not self.start_monitor_mode():
                return False
            
            # 3. Scan des r√©seaux
            networks = self.scan_networks()
            if not networks:
                self.log("Aucun r√©seau disponible", "ERROR")
                return False
            
            # 4. S√©lection de la cible
            target = self.select_target(networks)
            if not target:
                self.log("Aucune cible s√©lectionn√©e", "ERROR")
                return False
            
            self.log(f"Cible s√©lectionn√©e: {target['essid']} ({target['bssid']})")
            
            # 5. Attaques Python avanc√©es
            self.run_advanced_attacks(target)
            
            # 6. Attaques Ruby
            self.run_ruby_attacks(target)
            
            # 7. Attaques Bash
            self.run_bash_attacks(target)
            
            # 8. G√©n√©ration du rapport final
            self.generate_final_report(networks)
            
            self.log("üéâ Pentest WiFi complet termin√© avec succ√®s!")
            return True
            
        except KeyboardInterrupt:
            self.log("Interruption utilisateur", "WARNING")
            return False
        except Exception as e:
            self.log(f"Erreur lors du pentest: {e}", "ERROR")
            return False
        finally:
            self.cleanup()

def signal_handler(signum, frame):
    print("\n[!] Signal d'arr√™t re√ßu. Nettoyage...")
    if hasattr(signal_handler, 'master'):
        signal_handler.master.cleanup()
    sys.exit(0)

def main():
    parser = argparse.ArgumentParser(description='LEVIWIFITE MASTER - Pentest WiFi Ultra-Avanc√©')
    parser.add_argument('-i', '--interface', default='wlan0', help='Interface WiFi')
    parser.add_argument('-a', '--auto', action='store_true', help='Mode automatique')
    parser.add_argument('--config', help='Fichier de configuration')
    
    args = parser.parse_args()
    
    # Configuration des signaux
    signal.signal(signal.SIGINT, signal_handler)
    signal.signal(signal.SIGTERM, signal_handler)
    
    # Initialisation
    master = LeviWifiteMaster()
    signal_handler.master = master
    
    if args.interface:
        master.config['interface'] = args.interface
    
    if args.config:
        try:
            with open(args.config, 'r') as f:
                master.config.update(json.load(f))
        except:
            pass
    
    # Banni√®re
    print("""
    ‚ïî‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïó
    ‚ïë                    üöÄ LEVIWIFITE MASTER üöÄ                 ‚ïë
    ‚ïë              Pentest WiFi Ultra-Avanc√©                     ‚ïë
    ‚ïë              Coordination Multi-Langage                     ‚ïë
    ‚ïë                    Python + Ruby + Bash                    ‚ïë
    ‚ïö‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïù
    """)
    
    # Ex√©cution du pentest complet
    success = master.run_full_pentest()
    
    if success:
        print("\nüéâ LEVIWIFITE MASTER termin√© avec succ√®s!")
        print(f"üìä Consultez le rapport: {master.config['output_dir']}/rapport_final.html")
    else:
        print("\nüí• LEVIWIFITE MASTER a rencontr√© des erreurs")
        sys.exit(1)

if __name__ == "__main__":
    main()